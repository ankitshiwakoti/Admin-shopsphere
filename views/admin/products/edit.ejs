<%- contentFor('body') %>

<div class="container-fluid px-4 py-3">
    

      <!-- Page Header -->
      <div class="d-flex flex-wrap justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-heading">Edit Product</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="/admin/products/manage">Products</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Edit</li>
                </ol>
            </nav>
        </div>
        
    </div>

    <!-- Form Card -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-4">
            <% if(error_msg && error_msg.length > 0){ %>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= error_msg %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>

            <% if(success_msg && success_msg.length > 0){ %>
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= success_msg %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>

            <form id="productForm" action="/admin/products/edit/<%= product._id %>" method="POST" enctype="multipart/form-data">
                <!-- Step Indicators -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between position-relative">
                        <div class="progress position-absolute w-100" style="height: 2px; top: 50%; transform: translateY(-50%);">
                            <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="step active" data-step="1">
                            <div class="step-circle bg-primary text-white">1</div>
                            <div class="step-text">Basic Info</div>
                        </div>
                        <div class="step" data-step="2">
                            <div class="step-circle bg-light text-muted">2</div>
                            <div class="step-text">Details</div>
                        </div>
                        <div class="step" data-step="3">
                            <div class="step-circle bg-light text-muted">3</div>
                            <div class="step-text">Specifications</div>
                        </div>
                        <div class="step" data-step="4">
                            <div class="step-circle bg-light text-muted">4</div>
                            <div class="step-text">Attributes</div>
                        </div>
                        <div class="step" data-step="5">
                            <div class="step-circle bg-light text-muted">5</div>
                            <div class="step-text">Images</div>
                        </div>
                    </div>
                </div>

                <!-- Step 1: Basic Information -->
                <div class="step-content active" id="step1">
                    <h5 class="mb-3">Basic Information</h5>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="name" class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="name" name="name" value="<%= product.name %>" required>
                    </div>
                    <div class="col-md-6">
                            <label for="category" class="form-label">Category <span class="text-danger">*</span></label>
                            <select class="form-select" id="category" name="category" required>
                                <option value="">Select Category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>" <%= product.category._id.toString() === category._id.toString() ? 'selected' : '' %>>
                                        <%= category.name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" value="<%= product.price %>" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="stock" class="form-label">Stock <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="stock" name="stock" min="0" value="<%= product.stock %>" required>
                        </div>
                        <div class="col-md-6">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status">
                                <option value="draft" <%= product.status === 'draft' ? 'selected' : '' %>>Draft</option>
                                <option value="published" <%= product.status === 'published' ? 'selected' : '' %>>Published</option>
                                <option value="archived" <%= product.status === 'archived' ? 'selected' : '' %>>Archived</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Product Details -->
                <div class="step-content" id="step2">
                    <h5 class="mb-3">Product Details</h5>
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="shortDescription" class="form-label">Short Description</label>
                            <textarea class="form-control" id="shortDescription" name="shortDescription" rows="2"><%= product.shortDescription %></textarea>
                            <div class="form-text">A brief description that appears in product listings</div>
                        </div>
                        <div class="col-12">
                            <label for="description" class="form-label">Full Description <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="description" name="description" rows="5" required><%= product.description %></textarea>
                        </div>
                    </div>
                </div>

                <!-- Step 3: Specifications -->
                <div class="step-content" id="step3">
                    <h5 class="mb-3">Product Specifications</h5>
                    <div class="row g-3">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <label class="form-label mb-0">Specifications</label>
                                <button type="button" class="btn btn-sm btn-outline-primary" id="addSpecification">
                                    <i class="fas fa-plus me-1"></i>Add
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered" id="specificationsTable">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 40%">Name</th>
                                            <th style="width: 40%">Value</th>
                                            <th style="width: 20%">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if(product.specifications && product.specifications.length > 0) { %>
                                            <% product.specifications.forEach((spec, index) => { %>
                                                <tr>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm" name="specName[]" value="<%= spec.name %>" required>
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm" name="specValue[]" value="<%= spec.value %>" required>
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-outline-danger remove-spec">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="3" class="text-center text-muted">No specifications added</tr>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                            <input type="hidden" id="specifications" name="specifications" value="">
                        </div>
                    </div>
                </div>

                <!-- Step 4: Attributes -->
                <div class="step-content" id="step4">
                    <h5 class="mb-3">Product Attributes</h5>
                    <div class="row g-3">
                        <!-- Colors -->
                        <div class="col-md-6">
                            <label class="form-label">Colors</label>
                            <div class="d-flex flex-wrap gap-2 mb-2" id="colorContainer">
                                <% if(product.attributes && product.attributes.color && product.attributes.color.length > 0) { %>
                                    <% product.attributes.color.forEach(color => { %>
                                        <div class="color-item">
                                            <input type="text" class="form-control form-control-sm" name="color[]" value="<%= color %>">
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-color">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    <% }); %>
                                <% } %>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary" id="addColor">
                                <i class="fas fa-plus me-1"></i>Add Color
                            </button>
                        </div>
                        
                        <!-- Sizes -->
                        <div class="col-md-6">
                            <label class="form-label">Sizes</label>
                            <div class="d-flex flex-wrap gap-2 mb-2" id="sizeContainer">
                                <% if(product.attributes && product.attributes.size && product.attributes.size.length > 0) { %>
                                    <% product.attributes.size.forEach(size => { %>
                                        <div class="size-item">
                                            <input type="text" class="form-control form-control-sm" name="size[]" value="<%= size %>">
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-size">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    <% }); %>
                                <% } %>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary" id="addSize">
                                <i class="fas fa-plus me-1"></i>Add Size
                            </button>
                        </div>
                        
                        <input type="hidden" id="attributes" name="attributes" value="">
                    </div>
                </div>

                <!-- Step 5: Images -->
                <div class="step-content" id="step5">
                    <h5 class="mb-3">Product Images</h5>
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label">Current Images</label>
                            <div class="row g-3 mb-3">
                                <% if(product.images && product.images.length > 0) { %>
                                    <% product.images.forEach((image, index) => { %>
                                        <div class="col-md-3 col-sm-6">
                                            <div class="card h-100">
                                                <img src="<%= image.url %>" class="card-img-top" alt="Product Image" style="height: 150px; object-fit: cover;">
                                                <div class="card-body p-2">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="mainImage" id="mainImage<%= index %>" value="<%= index %>" <%= image.isMain ? 'checked' : '' %>>
                                                        <label class="form-check-label" for="mainImage<%= index %>">
                                                            Main Image
                                                        </label>
                                                    </div>
                                                    <button type="button" class="btn btn-sm btn-outline-danger w-100 mt-2 remove-image" data-index="<%= index %>">
                                                        <i class="fas fa-trash me-1"></i>Remove
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                <% } else { %>
                                    <div class="col-12">
                                        <div class="alert alert-info">
                                            No images uploaded yet
                                        </div>
                                    </div>
                                <% } %>
                                </div>
                            
                            <label for="images" class="form-label">Add New Images</label>
                            <input type="file" class="form-control" id="images" name="images" multiple accept="image/*">
                            <div class="form-text">You can select multiple images. The first image will be set as the main image.</div>
                        </div>
                    </div>
                </div>

                <!-- Navigation Buttons -->
                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-outline-secondary" id="prevBtn" style="display: none;">Previous</button>
                    <div>
                        <button type="button" class="btn btn-primary" id="nextBtn">Next</button>
                        <button type="submit" class="btn btn-primary" id="submitBtn" style="display: none;">Update Product</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div> 

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Form elements
    const form = document.getElementById('productForm');
    const steps = document.querySelectorAll('.step');
    const stepContents = document.querySelectorAll('.step-content');
    const progressBar = document.querySelector('.progress-bar');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    // Current step
    let currentStep = 1;
    const totalSteps = steps.length;
    
    // Update step visibility
    function updateStepVisibility() {
        // Update step indicators
        steps.forEach((step, index) => {
            const stepNumber = index + 1;
            const stepCircle = step.querySelector('.step-circle');
            
            if (stepNumber < currentStep) {
                step.classList.add('completed');
                stepCircle.classList.remove('bg-light', 'text-muted');
                stepCircle.classList.add('bg-success', 'text-white');
            } else if (stepNumber === currentStep) {
                step.classList.add('active');
                stepCircle.classList.remove('bg-light', 'text-muted');
                stepCircle.classList.add('bg-primary', 'text-white');
            } else {
                step.classList.remove('active', 'completed');
                stepCircle.classList.remove('bg-primary', 'bg-success', 'text-white');
                stepCircle.classList.add('bg-light', 'text-muted');
            }
        });
        
        // Update progress bar
        const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
        progressBar.style.width = `${progress}%`;
        
        // Show/hide step content
        stepContents.forEach((content, index) => {
            if (index + 1 === currentStep) {
                content.classList.add('active');
            } else {
                content.classList.remove('active');
            }
        });
        
        // Show/hide navigation buttons
        if (currentStep === 1) {
            prevBtn.style.display = 'none';
        } else {
            prevBtn.style.display = 'block';
        }
        
        if (currentStep === totalSteps) {
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'block';
        } else {
            nextBtn.style.display = 'block';
            submitBtn.style.display = 'none';
        }
    }
    
    // Validate current step
    function validateCurrentStep() {
        const currentContent = document.getElementById(`step${currentStep}`);
        const requiredFields = currentContent.querySelectorAll('[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                isValid = false;
                field.classList.add('is-invalid');
            } else {
                field.classList.remove('is-invalid');
            }
        });
        
        // Special validation for TinyMCE editor
        if (currentStep === 2) {
            const description = tinymce.get('description');
            if (description && !description.getContent().trim()) {
                isValid = false;
                document.getElementById('description').classList.add('is-invalid');
            }
        }
        
        return isValid;
    }
    
    // Navigation event listeners
    prevBtn.addEventListener('click', () => {
        if (currentStep > 1) {
            currentStep--;
            updateStepVisibility();
        }
    });
    
    nextBtn.addEventListener('click', () => {
        if (validateCurrentStep()) {
            if (currentStep < totalSteps) {
                currentStep++;
                updateStepVisibility();
            }
        } else {
            alert('Please fill in all required fields before proceeding.');
        }
    });
    
    // Specifications handling
    const addSpecBtn = document.getElementById('addSpecification');
    const specsTable = document.getElementById('specificationsTable').querySelector('tbody');
    const specsInput = document.getElementById('specifications');
    
    addSpecBtn.addEventListener('click', () => {
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
            <td>
                <input type="text" class="form-control form-control-sm" name="specName[]" required>
            </td>
            <td>
                <input type="text" class="form-control form-control-sm" name="specValue[]" required>
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-outline-danger remove-spec">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        specsTable.appendChild(newRow);
        
        // Remove "No specifications added" message if it exists
        const noSpecsRow = specsTable.querySelector('tr td[colspan="3"]');
        if (noSpecsRow) {
            noSpecsRow.parentElement.remove();
        }
    });
    
    // Remove specification
    specsTable.addEventListener('click', (e) => {
        if (e.target.closest('.remove-spec')) {
            const row = e.target.closest('tr');
            row.remove();
            
            // Show "No specifications added" message if no rows left
            if (specsTable.children.length === 0) {
                const noSpecsRow = document.createElement('tr');
                noSpecsRow.innerHTML = '<td colspan="3" class="text-center text-muted">No specifications added</td>';
                specsTable.appendChild(noSpecsRow);
            }
        }
    });
    
    // Attributes handling
    const addColorBtn = document.getElementById('addColor');
    const addSizeBtn = document.getElementById('addSize');
    const colorContainer = document.getElementById('colorContainer');
    const sizeContainer = document.getElementById('sizeContainer');
    const attributesInput = document.getElementById('attributes');
    
    addColorBtn.addEventListener('click', () => {
        const colorItem = document.createElement('div');
        colorItem.className = 'color-item';
        colorItem.innerHTML = `
            <input type="text" class="form-control form-control-sm" name="color[]">
            <button type="button" class="btn btn-sm btn-outline-danger remove-color">
                <i class="fas fa-times"></i>
            </button>
        `;
        colorContainer.appendChild(colorItem);
    });
    
    addSizeBtn.addEventListener('click', () => {
        const sizeItem = document.createElement('div');
        sizeItem.className = 'size-item';
        sizeItem.innerHTML = `
            <input type="text" class="form-control form-control-sm" name="size[]">
            <button type="button" class="btn btn-sm btn-outline-danger remove-size">
                <i class="fas fa-times"></i>
            </button>
        `;
        sizeContainer.appendChild(sizeItem);
    });
    
    // Remove color
    colorContainer.addEventListener('click', (e) => {
        if (e.target.closest('.remove-color')) {
            e.target.closest('.color-item').remove();
        }
    });
    
    // Remove size
    sizeContainer.addEventListener('click', (e) => {
        if (e.target.closest('.remove-size')) {
            e.target.closest('.size-item').remove();
        }
    });
    
    // Remove image
    document.querySelectorAll('.remove-image').forEach(button => {
        button.addEventListener('click', function() {
            const index = this.getAttribute('data-index');
            const imageCard = this.closest('.col-md-3');
            imageCard.remove();
            
            // If this was the main image, select another one
            if (this.previousElementSibling.querySelector('input[type="radio"]').checked) {
                const remainingRadios = document.querySelectorAll('input[name="mainImage"]');
                if (remainingRadios.length > 0) {
                    remainingRadios[0].checked = true;
                }
            }
        });
    });
    
    // Prepare form data before submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Prepare specifications
        const specNames = document.querySelectorAll('input[name="specName[]"]');
        const specValues = document.querySelectorAll('input[name="specValue[]"]');
        const specifications = [];
        
        for (let i = 0; i < specNames.length; i++) {
            if (specNames[i].value && specValues[i].value) {
                specifications.push({
                    name: specNames[i].value,
                    value: specValues[i].value
                });
            }
        }
        
        specsInput.value = JSON.stringify(specifications);
        
        // Prepare attributes
        const colors = Array.from(document.querySelectorAll('input[name="color[]"]')).map(input => input.value).filter(Boolean);
        const sizes = Array.from(document.querySelectorAll('input[name="size[]"]')).map(input => input.value).filter(Boolean);
        
        attributesInput.value = JSON.stringify({
            color: colors,
            size: sizes
        });

        // Handle main image selection
        const mainImageInput = document.querySelector('input[name="mainImage"]:checked');
        if (mainImageInput) {
            const mainImageIndex = parseInt(mainImageInput.value);
            const images = Array.from(document.querySelectorAll('.card-img-top')).map(img => ({
                url: img.src,
                isMain: false
            }));
            if (images[mainImageIndex]) {
                images[mainImageIndex].isMain = true;
            }
            // Add hidden input for images data
            const imagesInput = document.createElement('input');
            imagesInput.type = 'hidden';
            imagesInput.name = 'imagesData';
            imagesInput.value = JSON.stringify(images);
            form.appendChild(imagesInput);
        }
        
        // Submit the form
        this.submit();
    });
    
    // Initialize TinyMCE
    if (typeof tinymce !== 'undefined') {
        tinymce.init({
            selector: '#description',
            height: 300,
            plugins: 'advlist autolink lists link image charmap preview anchor searchreplace visualblocks code fullscreen insertdatetime media table code help wordcount',
            toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
            setup: function(editor) {
                editor.on('change', function() {
                    editor.save(); // Save content to the textarea
                });
            }
        });
    } else {
        console.error('TinyMCE is not loaded');
    }
    
    // Initialize step visibility
    updateStepVisibility();
});
</script>

<style>
.step {
    position: relative;
    z-index: 1;
    text-align: center;
    flex: 1;
}

.step-circle {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 0.5rem;
    font-weight: bold;
}

.step-text {
    font-size: 0.875rem;
    color: #6c757d;
}

.step.active .step-text {
    color: #0d6efd;
    font-weight: 500;
}

.step-content {
    display: none;
}

.step-content.active {
    display: block;
}

.color-item, .size-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.color-item input, .size-item input {
    width: 120px;
}
</style> 