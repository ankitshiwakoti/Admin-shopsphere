<%- contentFor('body') %>

<div class="container-fluid px-4 py-3">
    <!-- Page Header -->
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-heading">Product Management</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Product</li>
                </ol>
            </nav>
        </div>
        <a href="/admin/products/create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>New product
        </a>
    </div>

    <!-- Table Card -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <!-- Table Controls -->
            <div class="p-4 border-bottom">
                <div class="row g-3 align-items-center">
                    <!-- Left Controls -->
                    <div class="col-12 col-sm-6 col-lg-4">
                        <div class="input-group">
                            <span class="input-group-text bg-transparent border-end-0">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0 ps-0" placeholder="Search products..." id="searchInput">
                        </div>
                    </div>
                    
                    <!-- Right Controls -->
                    <div class="col-12 col-sm-6 col-lg-8">
                        <div class="d-flex gap-2 justify-content-sm-end">
                            <!-- Stock Filter -->
                            <select class="form-select w-auto" id="stockFilter">
                                <option value="">Stock</option>
                                <option value="in">In Stock</option>
                                <option value="out">Out of Stock</option>
                                <option value="low">Low Stock</option>
                            </select>
                            
                            <!-- Status Filter -->
                            <select class="form-select w-auto" id="statusFilter">
                                <option value="">Status</option>
                                <option value="published">Published</option>
                                <option value="draft">Draft</option>
                            </select>

                            <!-- Column Toggle -->
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-columns me-2"></i>Columns
                                </button>
                                <div class="dropdown-menu p-3" style="min-width: 200px;">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="colImage" checked>
                                        <label class="form-check-label" for="colImage">Image</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="colName" checked>
                                        <label class="form-check-label" for="colName">Name</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="colCategory" checked>
                                        <label class="form-check-label" for="colCategory">Category</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="colPrice" checked>
                                        <label class="form-check-label" for="colPrice">Price</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="colStock" checked>
                                        <label class="form-check-label" for="colStock">Stock</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="colStatus" checked>
                                        <label class="form-check-label" for="colStatus">Status</label>
                                    </div>
                                </div>
                            </div>

                            <!-- Export -->
                            <button class="btn btn-outline-secondary">
                                <i class="fas fa-download me-2"></i>Export
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="ps-4" style="width: 64px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll">
                                </div>
                            </th>
                            <th style="width: 80px;">Image</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Stock</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th class="pe-4" style="width: 100px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (typeof products !== 'undefined' && products.length > 0) { %>
                            <% products.forEach(product => { %>
                                <tr data-product-id="<%= product._id %>">
                                    <td class="ps-4">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="<%= product._id %>">
                                        </div>
                                    </td>
                                    <td>
                                        <% if(product.images && product.images.length > 0) { %>
                                            <img src="<%= product.images[0].url %>" alt="<%= product.name %>" class="rounded" style="width: 40px; height: 40px; object-fit: cover;">
                                        <% } else { %>
                                            <div class="bg-light d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                <i class="fas fa-image text-muted"></i>
                                            </div>
                                        <% } %>
                                    </td>
                                    <td>
                                        <h6 class="mb-0"><%= product.name %></h6>
                                    </td>
                                    <td><%= product.category ? product.category.name : 'N/A' %></td>
                                    <td>
                                        <% if (product.stock === 0) { %>
                                            <span class="badge bg-outofstock text-danger">Out of stock</span>
                                        <% } else if (product.stock <= 10) { %>
                                            <span class="badge bg-lowstock text-warning">Low stock (<%= product.stock %>)</span>
                                        <% } else { %>
                                            <span class="badge bg-instock text-success">In stock (<%= product.stock %>)</span>
                                        <% } %>
                                    </td>
                                    <td>$<%= product.price.toLocaleString('en-US', {minimumFractionDigits: 2}) %></td>
                                    <td>
                                        <% if(product.status === 'published') { %>
                                            <span class="badge bg-success">Published</span>
                                        <% } else if(product.status === 'draft') { %>
                                            <span class="badge bg-unsucess-inactive">Draft</span>
                                        <% } else { %>
                                            <span class="badge bg-archived">Archived</span>
                                        <% } %>
                                    </td>
                                    <td class="pe-4">
                                        <div class="d-flex gap-2">
                                            <a href="/admin/products/view/<%= product._id %>" 
                                               class="btn btn-sm btn-icon btn-outline-view" 
                                               title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a href="/admin/products/edit/<%= product._id %>" 
                                               class="btn btn-sm btn-icon btn-outline-edit" 
                                               title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button type="button" 
                                                    class="btn btn-sm btn-icon btn-outline-delete delete-product" 
                                                    data-id="<%= product._id %>"
                                                    title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr id="no-results-row">
                                <td colspan="8" class="text-center py-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                                        <h6 class="fw-semibold mb-1">No products found</h6>
                                        <p class="text-muted mb-0">Try adjusting your search or filters</p>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            
            <!-- Table Footer -->
            <div class="d-flex align-items-center justify-content-end p-4 border-top">
                <div class="d-flex align-items-center gap-3">
                    <select class="form-select w-auto" id="rowsPerPage">
                        <option value="10">10 rows</option>
                        <option value="20">20 rows</option>
                        <option value="50">50 rows</option>
                    </select>
                    
                    <nav aria-label="Product table pagination">
                        <ul class="pagination mb-0">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" tabindex="-1">Previous</a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <li class="page-item disabled">
                                <a class="page-link" href="#">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Product Modal -->
<div class="modal fade" id="createProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-semibold">Create New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <%- include('partials/productForm') %>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this product? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    const tooltips = document.querySelectorAll('[title]');
    tooltips.forEach(el => new bootstrap.Tooltip(el));

    // Cache DOM elements
    const table = document.querySelector('.table');
    const tbody = table.querySelector('tbody');
    const productRows = Array.from(tbody.querySelectorAll('tr[data-product-id]')); // Only get product rows
    const noResultsRow = document.getElementById('no-results-row');
    const searchInput = document.getElementById('searchInput');
    const stockFilter = document.getElementById('stockFilter');
    const statusFilter = document.getElementById('statusFilter');
    const selectAll = document.getElementById('selectAll');
    const rowsPerPageSelect = document.getElementById('rowsPerPage');
    const exportButton = document.querySelector('.btn-outline-secondary i.fas.fa-download').parentElement;
    
    // Log total number of products from server
    console.log('Total products from server:', productRows.length);
    
    // Store original table data
    const originalRows = productRows.map(row => ({
        element: row,
        searchText: row.textContent.toLowerCase(),
        stock: row.querySelector('td:nth-child(5) .badge')?.textContent.toLowerCase() || '',
        status: row.querySelector('td:nth-child(7) .badge')?.textContent.toLowerCase() || '',
        isVisible: true // Add visibility flag
    }));
    
    console.log('Original rows array length:', originalRows.length);

    // Handle search and filters
    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        const stockValue = stockFilter.value.toLowerCase();
        const statusValue = statusFilter.value.toLowerCase();

        let visibleCount = 0;
        originalRows.forEach(row => {
            let show = row.searchText.includes(searchTerm);

            // Apply stock filter
            if (stockValue) {
                if (stockValue === 'in' && !row.stock.includes('in stock')) show = false;
                if (stockValue === 'out' && !row.stock.includes('out of stock')) show = false;
                if (stockValue === 'low' && !row.stock.includes('low stock')) show = false;
            }

            // Apply status filter
            if (statusValue && !row.status.includes(statusValue)) {
                show = false;
            }

            // Update visibility flag instead of display style
            row.isVisible = show;
            if (show) visibleCount++;
        });

        console.log('Visible rows after filtering:', visibleCount);

        currentPage = 1; // Reset to first page when filtering
        updatePagination();
    }

    // Handle column visibility
    const columnToggles = document.querySelectorAll('[id^="col"]');
    columnToggles.forEach(toggle => {
        toggle.addEventListener('change', function() {
            const column = this.id.replace('col', '').toLowerCase();
            let columnIndex;
            
            // Map column names to indices
            switch(column) {
                case 'image': columnIndex = 1; break;
                case 'name': columnIndex = 2; break;
                case 'category': columnIndex = 3; break;
                case 'stock': columnIndex = 4; break;
                case 'price': columnIndex = 5; break;
                case 'status': columnIndex = 6; break;
            }

            if (columnIndex !== undefined) {
                const cells = document.querySelectorAll(`td:nth-child(${columnIndex + 1}), th:nth-child(${columnIndex + 1})`);
                cells.forEach(cell => {
                    cell.style.display = this.checked ? '' : 'none';
                });
            }
        });
    });

    // Handle checkboxes
    if (selectAll) {
        selectAll.addEventListener('change', function() {
            const checkboxes = tbody.querySelectorAll('.form-check-input');
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        });
    }

    // Handle export
    exportButton.addEventListener('click', function() {
        const checkedRows = tbody.querySelectorAll('.form-check-input:checked');
        if (checkedRows.length === 0) {
            alert('Please select at least one product to export');
            return;
        }

        const data = [];
        checkedRows.forEach(checkbox => {
            const row = checkbox.closest('tr');
            const product = {
                name: row.querySelector('td:nth-child(3) h6').textContent,
                category: row.querySelector('td:nth-child(4)').textContent,
                stock: row.querySelector('td:nth-child(5) .badge').textContent,
                price: row.querySelector('td:nth-child(6)').textContent,
                status: row.querySelector('td:nth-child(7) .badge').textContent
            };
            data.push(product);
        });

        // Convert to CSV
        const csv = convertToCSV(data);
        downloadCSV(csv, 'products.csv');
    });

    function convertToCSV(data) {
        const headers = Object.keys(data[0]);
        const rows = data.map(obj => headers.map(header => obj[header]));
        return [headers, ...rows].map(row => row.join(',')).join('\n');
    }

    function downloadCSV(csv, filename) {
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (navigator.msSaveBlob) {
            navigator.msSaveBlob(blob, filename);
        } else {
            link.href = URL.createObjectURL(blob);
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }

    // Handle pagination
    let currentPage = 1;
    let rowsPerPage = parseInt(rowsPerPageSelect.value);
    
    console.log('Initial rows per page:', rowsPerPage);

    function updatePagination() {
        // Get visible rows using visibility flag
        const visibleRows = originalRows.filter(row => row.isVisible);
        
        const totalRows = visibleRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        
        console.log('Pagination update - Total rows:', totalRows, 'Rows per page:', rowsPerPage, 'Total pages:', totalPages, 'Current page:', currentPage);
        
        // Ensure current page is valid
        currentPage = Math.max(1, Math.min(currentPage, totalPages || 1));
        
        // Calculate start and end indices for current page
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, totalRows);
        
        console.log('Showing rows from index', startIndex, 'to', endIndex);
        
        // First hide all rows
        originalRows.forEach(row => {
            row.element.style.display = 'none';
        });
        
        // Show only rows for current page
        visibleRows.forEach((row, index) => {
            if (index >= startIndex && index < endIndex) {
                row.element.style.display = '';
                console.log('Showing row at index', index, 'with product ID:', row.element.getAttribute('data-product-id'));
            }
        });

        // Show/hide no results message
        if (noResultsRow) {
            noResultsRow.style.display = totalRows === 0 ? '' : 'none';
        }

        // Update pagination UI
        const pagination = document.querySelector('.pagination');
        
        // If we have fewer rows than the rows per page or only one page, show simplified pagination
        if (totalRows <= rowsPerPage || totalPages <= 1) {
            pagination.innerHTML = `
                <li class="page-item disabled">
                    <a class="page-link" href="#"><i class="fas fa-chevron-left"></i></a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item disabled">
                    <a class="page-link" href="#"><i class="fas fa-chevron-right"></i></a>
                </li>
            `;
            return;
        }
        
        // Otherwise, show full pagination
        let paginationHTML = `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage - 1}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
        `;

        // Add page numbers
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `
                <li class="page-item ${currentPage === i ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>
            `;
        }

        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage + 1}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        `;

        pagination.innerHTML = paginationHTML;

        // Add click handlers to pagination links
        document.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const newPage = parseInt(this.dataset.page);
                if (!isNaN(newPage) && newPage > 0 && newPage <= totalPages) {
                    console.log('Pagination link clicked:', {newPage, currentPage, totalPages, linkText: this.textContent.trim()});
                    currentPage = newPage;
                    updatePagination();
                }
            });
        });
    }

    // Event listeners
    searchInput.addEventListener('input', handleSearch);
    stockFilter.addEventListener('change', handleSearch);
    statusFilter.addEventListener('change', handleSearch);
    
    // Handle rows per page change
    rowsPerPageSelect.addEventListener('change', function() {
        rowsPerPage = parseInt(this.value);
        console.log('Rows per page changed to:', rowsPerPage);
        currentPage = 1; // Reset to first page
        updatePagination();
    });

    // Initialize table - show all rows first
    function initializeTable() {
        // Set all rows as visible initially
        originalRows.forEach(row => {
            row.isVisible = true;
            row.element.style.display = '';
        });
        
        // Then apply pagination
        updatePagination();
    }
    
    // Call initialize function
    initializeTable();

    // Delete Product
    let productToDelete = null;
    document.querySelectorAll('.delete-product').forEach(button => {
        button.addEventListener('click', function() {
            productToDelete = this.getAttribute('data-id');
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            deleteModal.show();
        });
    });

    // Confirm Delete
    document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
        if (productToDelete) {
            deleteProduct(productToDelete);
        }
    });

    // Delete Product
    function deleteProduct(productId) {
        fetch(`/admin/products/${productId}/delete`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
                return;
            }
            return response.json();
        })
        .then(data => {
            if (data && data.success) {
                // Close modal
                const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                deleteModal.hide();
                
                // Show success message
                alert('Product deleted successfully');
                
                // Reload page
                window.location.reload();
            } else if (data && !data.success) {
                alert('Error deleting product: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error deleting product');
        });
    }

    // Helper function to get color hex code
    function getColorHex(colorName) {
        const colorMap = {
            'Black': '#000000',
            'White': '#FFFFFF',
            'Red': '#FF0000',
            'Blue': '#0000FF',
            'Green': '#008000',
            'Yellow': '#FFFF00',
            'Purple': '#800080',
            'Orange': '#FFA500'
        };
        
        return colorMap[colorName] || '#CCCCCC';
    }
});
</script>

<style>
.color-swatch {
    display: inline-block;
    width: 16px;
    height: 16px;
    border-radius: 4px;
    margin-right: 4px;
    vertical-align: middle;
    border: 1px solid #dee2e6;
}
</style> 